/** _grid.scss */


@use '../config/mixins' as m;

$sizing-scale: (
  '1': 8px,
  '2': 16px,
  '3': 24px,
  '4': 32px,
  '6': 48px,
  '8': 64px,
  '10': 80px
);

$grid-columns: 12 !default;

$grid: (
  'cols': grid-template-columns,
  'rows': grid-template-rows
);

$grid-auto-flow: (
  'row': row,
  'column': column,
  'row-dense': row dense,
  'column-dense': column dense
);

$grid-auto-cols: (
  'auto-cols-auto': auto,
  'auto-cols-min': min-content,
  'auto-cols-max': max-content,
  'auto-cols-fr': minmax(0, 1fr)
);

$grid-auto-rows: (
  'auto-rows-auto': auto,
  'auto-rows-min': min-content,
  'auto-rows-max': max-content,
  'auto-rows-fr': minmax(0, 1fr)
);

$grid-span: (
  'span': grid-column,
  'span-row': grid-row
);

@mixin get-grid-cols($templated) {
  @for $i from 1 through $grid-columns {
    &-#{$i} {
      #{$templated}: repeat($i, minmax(0, 1fr));
    }
  }
}

@each $name, $value in $grid-span {
  .#{$name} {
    @for $i from 1 through $grid-columns {
      &-#{$i} {
        #{$value}: span $i;
      }
    }

    @include m.getMediaQuerys {
      @for $i from 1 through $grid-columns {
        &-#{$i} {
          #{$value}: span $i;
        }
      }
    }
  }
}

.grid {
  display: grid;
}

.cols {
  @include get-grid-cols(grid-template-columns);

  @include m.getMediaQuerys {
    @include get-grid-cols(grid-template-columns);
  }
}

.rows {
  @include get-grid-cols(grid-template-rows);

  @include m.getMediaQuerys {
    @include get-grid-cols(grid-template-rows);
  }
}

.gap {
  @include m.getValueMap($sizing-scale, gap);
}
