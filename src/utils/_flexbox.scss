@use '../config/variables' as v;

/* flex */

.flex-1 {
  flex: 1 1 0%;
}

.flex-auto {
  flex: 1 1 auto;
}

.flex-initial {
  flex: 0 1 auto;
}

.flex-none {
  flex: none;
}

.flex-grow {
  flex-grow: 1;
}

.flex-nogrow {
  flex-grow: 0;
}

.flex-shrink {
  flex-shrink: 1;
}

.flex-noshrink {
  flex-shrink: 0;
}

/* flex-wrap */

$flex-wrap: (
  'wrap': wrap,
  'wrap-reverse': wrap-reverse,
  'nowrap': nowrap
);

@each $name, $value in $flex-wrap {
  .flex-#{$name} {
    flex-wrap: #{$value};
  }
}

/* flex-direction */

$flex-directions: (
  'col': column,
  'col-reverse': column-reverse,
  'row': row,
  'row-reverse': row-reverse
);

@each $name, $value in $flex-directions {
  .flex-#{$name} {
    flex-direction: #{$value};
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @each $name, $value in $flex-directions {
      .flex-#{$device}-#{$name} {
        flex-direction: #{$value};
      }
    }
  }
}

/* align-items */

$align-items: (
  'center': center,
  'start': flex-start,
  'end': flex-end,
  'stretch': stretch
);

@each $name, $value in $align-items {
  .items-#{$name} {
    align-items: #{$value};
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @each $name, $value in $align-items {
      .items-#{device}-#{$name} {
        align-items: #{$value};
      }
    }
  }
}

/* justify-content */

$justify-content: (
  'center': center,
  'start': flex-start,
  'end': flex-end,
  'stretch': stretch,
  'around': space-around,
  'between': space-between,
  'evenly': space-evenly
);

@each $name, $value in $justify-content {
  .content-#{$name} {
    justify-content: #{$value};
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @each $name, $value in $justify-content {
      .content-#{$device}-#{$name} {
        justify-content: #{$value};
      }
    }
  }
}

/* gap */

$gap-scales: (
  '1': 8px,
  '2': 16px,
  '3': 24px,
  '4': 32px,
  '6': 48px,
  '8': 64px,
  '10': 80px
);

@each $name, $value in $gap-scales {
  .gap-#{$name} {
    gap: #{$value};
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @each $name, $value in $gap-scales {
      .gap-#{$device}-#{$name} {
        gap: #{$value};
      }
    }
  }
}

/* grid-column */

@for $i from 1 through 12 {
  .span-#{$i} {
    grid-column: span $i;
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @for $i from 1 through 12 {
      .span-#{$device}-#{$i} {
        grid-column: span $i;
      }
    }
  }
}

/* grid-row */

@for $i from 1 through 12 {
  .span-row-#{$i} {
    grid-row: span $i;
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @for $i from 1 through 12 {
      .span-row-#{$device}-#{$i} {
        grid-row: span $i;
      }
    }
  }
}

/* grid-template-rows*/

@for $i from 1 through 12 {
  .cols-#{$i} {
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @for $i from 1 through 12 {
      .cols-#{device}-#{$i} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
      }
    }
  }
}

/* grid-template-rows*/

@for $i from 1 through 12 {
  .rows-#{$i} {
    grid-template-rows: repeat($i, minmax(0, 1fr));
  }
}

@each $device, $valueBreakpoint in v.$breakpoints {
  @media only screen and (min-width: $valueBreakpoint) {
    @for $i from 1 through 12 {
      .rows-#{$device}-#{$i} {
        grid-template-rows: repeat($i, minmax(0, 1fr));
      }
    }
  }
}

/* grid.scss */

// $grid-auto-flow: (
//   'row': row,
//   'column': column,
//   'row-dense': row dense,
//   'column-dense': column dense
// );

// $grid-auto-cols: (
//   'auto-cols-auto': auto,
//   'auto-cols-min': min-content,
//   'auto-cols-max': max-content,
//   'auto-cols-fr': minmax(0, 1fr)
// );

// $grid-auto-rows: (
//   'auto-rows-auto': auto,
//   'auto-rows-min': min-content,
//   'auto-rows-max': max-content,
//   'auto-rows-fr': minmax(0, 1fr)
// );
